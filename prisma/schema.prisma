// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  hashedPassword String?   // Optional for Google users
  name           String?
  phone          String?
  phoneVerified  DateTime? // Phone verification timestamp
  address        String?
  image          String?   // Profile picture from Google
  role           UserRole  @default(CUSTOMER)
  emailVerified  DateTime? // For OAuth providers
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  orders         Order[]
  wishlistItems  WatchWishlist[]
  reviews        Review[]
  accounts       Account[] // OAuth accounts
  sessions       Session[] // User sessions
  savedAddresses SavedAddress[]
  otps           OTP[]     // OTP verification records

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model OTP {
  id         String      @id @default(cuid())
  userId     String?     // Optional - for logged-in users
  email      String?     // For email verification
  phone      String?     // For phone verification
  otp        String      // The OTP code (hashed)
  type       OTPType     // EMAIL or PHONE
  purpose    OTPPurpose  // SIGNUP, LOGIN, RESET_PASSWORD, etc.
  attempts   Int         @default(0) // Failed verification attempts
  maxAttempts Int        @default(3) // Maximum allowed attempts
  isVerified Boolean     @default(false)
  expiresAt  DateTime    // OTP expiration time
  createdAt  DateTime    @default(now())
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([phone])
  @@map("otps")
}

model SavedAddress {
  id           String   @id @default(cuid())
  userId       String
  firstName    String
  lastName     String
  phone        String
  houseNo      String?  // House/Flat number
  flatNo       String?  // Flat/Unit number (optional)
  building     String?  // Building/Apartment name
  street       String   // Street/Road name
  landmark     String?  // Nearby landmark (optional)
  address      String   // Full formatted address string
  city         String
  state        String
  zipCode      String
  country      String   @default("India")
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("saved_addresses")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  type        CategoryType @default(GENERAL)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products ProductCategory[]

  @@map("categories")
}

enum CategoryType {
  FOR_HIM
  FOR_HER
  SALE_1499
  SALE_1999
  GENERAL
}

model Product {
  id                 String   @id @default(cuid())
  brand              String
  model              String
  referenceNumber    String?
  description        String   @db.Text
  price              Decimal  @db.Decimal(10, 2)
  previousPrice      Decimal? @db.Decimal(10, 2)
  condition          Condition
  year               Int?
  gender             Gender
  movement           Movement
  caseMaterial       String
  bandMaterial       String
  waterResistance    String?
  diameter           String?
  authenticityStatus AuthenticityStatus @default(PENDING)
  sku                String   @unique
  stockQuantity      Int      @default(0)
  isFeatured         Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  categories         ProductCategory[]
  images             ProductImage[]
  orderItems         OrderItem[]
  wishlistItems      WatchWishlist[]
  reviews            Review[]

  @@map("products")
}

model ProductImage {
  id                 String @id @default(cuid())
  productId          String
  cloudinaryPublicId String
  imageUrl           String
  altText            String?
  isPrimary          Boolean @default(false)
  sortOrder          Int     @default(0)
  variantSku         String? // Unique SKU for this image variant
  colorName          String? // Color name (e.g., "Black", "Silver", "Gold")
  colorCode          String? // Color code (e.g., "BLK", "SLV", "GLD")
  isSelectable       Boolean @default(true) // Can customer select this variant
  createdAt          DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Order {
  id                   String        @id @default(cuid())
  userId               String
  totalAmount          Decimal       @db.Decimal(10, 2)
  status               OrderStatus   @default(PENDING)
  shippingAddress      String
  trackingNumber       String?
  // Payment fields for future gateway integration
  paymentStatus        PaymentStatus @default(PENDING)
  paymentMethod        String?
  paymentTransactionId String?
  paymentGateway       String?
  paymentAmount        Decimal?      @db.Decimal(10, 2)
  paymentCurrency      String        @default("INR")
  paymentCompletedAt   DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id                      String  @id @default(cuid())
  orderId                 String
  productId               String
  quantity                Int
  priceAtTimeOfPurchase   Decimal @db.Decimal(10, 2)
  createdAt               DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model WatchWishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("watch_wishlists")
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  createdAt  DateTime @default(now())

  // Relations
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@map("product_categories")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// Enums
enum UserRole {
  ADMIN
  CUSTOMER
}

enum Condition {
  NEW
  PRE_OWNED
  VINTAGE
}

enum Gender {
  MENS
  WOMENS
  UNISEX
}

enum Movement {
  AUTOMATIC
  MANUAL
  QUARTZ
}

enum AuthenticityStatus {
  PENDING
  VERIFIED
  CERTIFIED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum OTPType {
  EMAIL
  PHONE
}

enum OTPPurpose {
  SIGNUP
  LOGIN
  RESET_PASSWORD
  VERIFY_EMAIL
  VERIFY_PHONE
  TWO_FACTOR_AUTH
}

