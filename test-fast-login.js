#!/usr/bin/env node

const https = require('https')
const http = require('http')

// Helper function to make HTTP requests
function makeRequest(options, postData = null) {
  return new Promise((resolve, reject) => {
    const client = options.port === 443 ? https : http
    
    const req = client.request(options, (res) => {
      let data = ''
      
      res.on('data', (chunk) => {
        data += chunk
      })
      
      res.on('end', () => {
        try {
          const response = {
            statusCode: res.statusCode,
            headers: res.headers,
            data: data ? JSON.parse(data) : null
          }
          resolve(response)
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: data
          })
        }
      })
    })
    
    req.on('error', (error) => {
      reject(error)
    })
    
    if (postData) {
      req.write(postData)
    }
    
    req.end()
  })
}

async function testFastLogin() {
  console.log('‚ö° Testing Optimized Fast Login...\n')

  try {
    // Test 1: Admin login with timing
    console.log('1Ô∏è‚É£ Testing Admin Login Speed...')
    const startTime = Date.now()
    
    const adminLoginData = JSON.stringify({
      email: 'admin@walnut.com',
      password: 'admin123'
    })
    
    const adminLoginOptions = {
      hostname: 'localhost',
      port: 3001,
      path: '/api/auth/login',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(adminLoginData)
      }
    }
    
    const adminResponse = await makeRequest(adminLoginOptions, adminLoginData)
    const loginTime = Date.now() - startTime
    
    console.log(`   ‚è±Ô∏è  API Response Time: ${loginTime}ms`)
    console.log('   üìä Status:', adminResponse.statusCode)
    console.log('   üë§ User:', adminResponse.data?.email)
    console.log('   üé≠ Role:', adminResponse.data?.role)
    
    if (loginTime < 100) {
      console.log('   üöÄ BLAZING FAST! (< 100ms)')
    } else if (loginTime < 200) {
      console.log('   ‚ö° VERY FAST! (< 200ms)')
    } else if (loginTime < 500) {
      console.log('   ‚úÖ FAST! (< 500ms)')
    } else {
      console.log('   ‚ö†Ô∏è  Could be faster')
    }

    // Test 2: User login with timing
    console.log('\n2Ô∏è‚É£ Testing User Login Speed...')
    const userStartTime = Date.now()
    
    const userLoginData = JSON.stringify({
      email: 'user@walnut.com',
      password: 'user123'
    })
    
    const userLoginOptions = {
      hostname: 'localhost',
      port: 3001,
      path: '/api/auth/login',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(userLoginData)
      }
    }
    
    const userResponse = await makeRequest(userLoginOptions, userLoginData)
    const userLoginTime = Date.now() - userStartTime
    
    console.log(`   ‚è±Ô∏è  API Response Time: ${userLoginTime}ms`)
    console.log('   üìä Status:', userResponse.statusCode)
    console.log('   üë§ User:', userResponse.data?.email)
    console.log('   üé≠ Role:', userResponse.data?.role)
    
    if (userLoginTime < 100) {
      console.log('   üöÄ BLAZING FAST! (< 100ms)')
    } else if (userLoginTime < 200) {
      console.log('   ‚ö° VERY FAST! (< 200ms)')
    } else if (userLoginTime < 500) {
      console.log('   ‚úÖ FAST! (< 500ms)')
    } else {
      console.log('   ‚ö†Ô∏è  Could be faster')
    }

    // Test 3: Multiple rapid requests
    console.log('\n3Ô∏è‚É£ Testing Rapid Login Requests...')
    const rapidStartTime = Date.now()
    
    const promises = []
    for (let i = 0; i < 3; i++) {
      promises.push(makeRequest(adminLoginOptions, adminLoginData))
    }
    
    const rapidResponses = await Promise.all(promises)
    const rapidTime = Date.now() - rapidStartTime
    
    console.log(`   ‚è±Ô∏è  Total Time for 3 requests: ${rapidTime}ms`)
    console.log(`   ‚è±Ô∏è  Average per request: ${Math.round(rapidTime / 3)}ms`)
    console.log('   üìä All successful:', rapidResponses.every(r => r.statusCode === 200))

    // Performance Summary
    console.log('\nüìä Performance Summary:')
    console.log(`   ‚ö° Admin Login: ${loginTime}ms`)
    console.log(`   ‚ö° User Login: ${userLoginTime}ms`)
    console.log(`   ‚ö° Average: ${Math.round((loginTime + userLoginTime) / 2)}ms`)
    console.log(`   ‚ö° Rapid Requests: ${Math.round(rapidTime / 3)}ms avg`)
    
    const averageTime = Math.round((loginTime + userLoginTime) / 2)
    
    if (averageTime < 100) {
      console.log('\nüéâ EXCELLENT! Login is blazing fast!')
    } else if (averageTime < 200) {
      console.log('\nüöÄ GREAT! Login is very fast!')
    } else if (averageTime < 500) {
      console.log('\n‚úÖ GOOD! Login is fast enough!')
    } else {
      console.log('\n‚ö†Ô∏è  Login could be optimized further')
    }

    console.log('\nüí° Frontend Optimizations Applied:')
    console.log('   ‚úÖ Direct API calls instead of NextAuth signIn')
    console.log('   ‚úÖ Optimistic user state updates')
    console.log('   ‚úÖ Immediate toast notifications')
    console.log('   ‚úÖ Instant redirects')
    console.log('   ‚úÖ Animated loading states')
    console.log('   ‚úÖ Background NextAuth sync')

  } catch (error) {
    console.error('‚ùå Fast login test failed:', error.message)
  }
}

testFastLogin()
